<?php

namespace SUDHAUS7\Sudhaus7Gpgadmin\Tests\Functional;

use SUDHAUS7\Sudhaus7Gpgadmin\Domain\Model\KeyInformationImmutable;
use SUDHAUS7\Sudhaus7Gpgadmin\Domain\Service\PgpExtensionHandler;

use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\TestingFramework\Core\Functional\FunctionalTestCase;
use function file_get_contents;

class GpgExtensionEncoderTest extends FunctionalTestCase
{
    protected array $testExtensionsToLoad = [
        'typo3conf/ext/sudhaus7_gpgadmin',
    ];



    protected $key;

    /** @test */
    public function canInstantiateHandler()
    {
        $handler = new PgpExtensionHandler();
        $this->assertInstanceOf(PgpExtensionHandler::class, $handler);
    }

    /** @test */
    public function canReadKey()
    {
        $handler = new PgpExtensionHandler();
        $info = $handler->keyInformation($this->key);
        $this->assertInstanceOf(KeyInformationImmutable::class, $info);
    }

    /** @test */
    public function isCorrectKey()
    {
        $handler = new PgpExtensionHandler();
        $info = $handler->keyInformation($this->key);
        $this->assertEquals('foppel@gmail.com', $info->getEmail());
    }

    /** @test */
    public function canEncode()
    {
        $msg = 'Test Message';
        $handler = new PgpExtensionHandler();
        $info = $handler->keyInformation($this->key);
        $encoded = $handler->encode($msg, $info);
        $this->assertStringStartsWith('-----BEGIN PGP MESSAGE-----', $encoded);
    }

    protected function setUp(): void
    {
        parent::setUp();
        $this->key = file_get_contents(__DIR__.'/Fixtures/key.asc');
		$this->importCSVDataSet( __DIR__ . '/Fixtures/tx_sudhaus7gpgadmin_domain_model_gpgkey.csv');
        //$this->importDataSet('ntf://Database/pages.xml');
    }
	protected function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
		GeneralUtility::makeInstance( ConnectionPool::class)->getConnectionForTable( 'pages')->truncate( 'pages');
		GeneralUtility::makeInstance( ConnectionPool::class)->getConnectionForTable( 'tx_sudhaus7gpgadmin_domain_model_gpgkey')->truncate( 'tx_sudhaus7gpgadmin_domain_model_gpgkey');
	}
}
